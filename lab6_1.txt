#include <stdio.h>
#define MAX_PROCESS 100
#define MAX_RESOURCE 100

int available[MAX_RESOURCE]; // 可利用资源向量
int max[MAX_PROCESS][MAX_RESOURCE]; // 最大需求矩阵
int allocation[MAX_PROCESS][MAX_RESOURCE]; // 分配矩阵
int need[MAX_PROCESS][MAX_RESOURCE]; // 需求矩阵
int work[MAX_RESOURCE]; // 工作向量
int finish[MAX_PROCESS]; // 完成向量
int safe_sequence[MAX_PROCESS]; // 安全序列

int n, m; // 进程数，资源数

// 初始化数据
void init() {
    int i, j;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    printf("Enter the number of resources: ");
    scanf("%d", &m);
    printf("Enter the available resources: ");
    for (i = 0; i < m; i++) {
        scanf("%d", &available[i]);
    }
    printf("Enter the maximum demand of each process: ");
    for (i = 0; i < n; i++) {
        printf("Process %d: ", i+1);
        for (j = 0; j < m; j++) {
            scanf("%d", &max[i][j]);
        }
    }
    printf("Enter the allocation of each process: ");
    for (i = 0; i < n; i++) {
        printf("Process %d: ", i+1);
        for (j = 0; j < m; j++) {
            scanf("%d", &allocation[i][j]);
            need[i][j] = max[i][j] - allocation[i][j]; // 计算需求矩阵
        }
        finish[i] = 0; // 初始化完成向量
    }
}

// 判断进程是否可以完成
int can_finish(int p) {
    int i;
    for (i = 0; i < m; i++) {
        if (need[p][i] > work[i]) {
            return 0;
        }
    }
    return 1;
}

// 执行银行家算法
int banker_algorithm() {
    int i, j, k, count = 0;
    for (i = 0; i < m; i++) {
        work[i] = available[i]; // 初始化工作向量
    }
    while (count < n) { // 循环直到所有进程都完成
        int found = 0;
        for (i = 0; i < n; i++) {
            if (finish[i] == 0 && can_finish(i)) { // 如果进程未完成且可以完成
                found = 1;
                for (j = 0; j < m; j++) {
                    work[j] += allocation[i][j]; // 更新工作向量
                }
                finish[i] = 1; // 标记进程为完成
                safe_sequence[count] = i; // 将进程加入安全序列
                count++; // 完成进程数加1
            }
        }
        if (found == 0) { // 如果没有进程可以完成，说明无法分配资源
            return 0;
        }
    }
    return 1;
}

// 输出安全序列
void show_safe_sequence() {
    int i;
    printf("Safe sequence: ");
    for (i = 0; i < n; i++) {
        printf("%d ", safe_sequence[i]+1);
    }
    printf("\n");
}

int main() {
    init();
    if (banker_algorithm()) {
        show_safe_sequence();
    } else {
        printf("Unsafe state!\n");
    }
    return 0;
}